.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Koha::Misc::Files 3pm"
.TH Koha::Misc::Files 3pm "2018-08-29" "perl v5.20.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Koha::Misc::Files \- module for managing miscellaneous files associated
with records from arbitrary tables
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
use Koha::Misc::Files;
.PP
my \f(CW$mf\fR = Koha::Misc::Files\->new( tabletag => \f(CW$tablename\fR,
    recordid => \f(CW$recordnumber\fR );
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.IP "\fInew()\fR" 4
.IX Item "new()"
my \f(CW$mf\fR = Koha::Misc::Files\->new( tabletag => \f(CW$tablename\fR,
    recordid => \f(CW$recordnumber\fR );
.Sp
Creates new Koha::Misc::Files object. Such object is essentially
a pair: in typical usage scenario, 'tabletag' parameter will be
a database table name, and 'recordid' an unique record \s-1ID\s0 number
from this table. However, this method does accept an arbitrary
string as 'tabletag', and an arbitrary integer as 'recordid'.
.Sp
Particular Koha::Misc::Files object can have one or more file records
(actuall file contents + various file metadata) associated with it.
.Sp
In case of an error (wrong parameter format) it returns undef.
.IP "\fIGetFilesInfo()\fR" 4
.IX Item "GetFilesInfo()"
my \f(CW$files_descriptions\fR = \f(CW$mf\fR\->\fIGetFilesInfo()\fR;
.Sp
This method returns a reference to an array of hashes
containing files metadata (file_id, file_name, file_type,
file_description, file_size, date_uploaded) for all file records
associated with given \f(CW$mf\fR object, or an empty arrayref if there are
no such records yet.
.Sp
In case of an error it returns undef.
.IP "\fIAddFile()\fR" 4
.IX Item "AddFile()"
\&\f(CW$mf\fR\->AddFile( name => \f(CW$filename\fR, type => \f(CW$mimetype\fR,
    description => \f(CW$description\fR, content => \f(CW$content\fR );
.Sp
Adds a new file (we want to store for / associate with a given
object) to the database. Parameters 'name' and 'content' are mandatory.
Note: this method would (silently) fail if there is no 'name' given
or if the 'content' provided is empty.
.IP "\fIGetFile()\fR" 4
.IX Item "GetFile()"
my \f(CW$file\fR = \f(CW$mf\fR\->GetFile( id => \f(CW$file_id\fR );
.Sp
For an individual, specific file \s-1ID\s0 this method returns a hashref
containing all metadata (file_id, table_tag, record_id, file_name,
file_type, file_description, file_content, date_uploaded), plus
an actuall contents of a file (in 'file_content'). In typical usage
scenarios, for a given \f(CW$mf\fR object, specific file IDs have to be
obtained first by \fIGetFilesInfo()\fR call.
.Sp
Returns undef in case when file \s-1ID\s0 specified as 'id' parameter was not
found in the database.
.IP "\fIDelFile()\fR" 4
.IX Item "DelFile()"
\&\f(CW$mf\fR\->DelFile( id => \f(CW$file_id\fR );
.Sp
Deletes specific, individual file record (file contents and metadata)
from the database.
.IP "\fIDelAllFiles()\fR" 4
.IX Item "DelAllFiles()"
\&\f(CW$mf\fR\->\fIDelAllFiles()\fR;
.Sp
Deletes all file records associated with (stored for) a given \f(CW$mf\fR object.
.IP "\fIMergeFileRecIds()\fR" 4
.IX Item "MergeFileRecIds()"
\&\f(CW$mf\fR\->MergeFileRecIds(@ids_to_be_merged);
.Sp
This method re-associates all individuall file records associated with
some \*(L"parent\*(R" records IDs (provided in \f(CW@ids_to_be_merged\fR) with the given
single \f(CW$mf\fR object (which would be treated as a \*(L"parent\*(R" destination).
.Sp
This a helper method; typically it needs to be called only in cases when
some \*(L"parent\*(R" records are being merged in the (external) 'tablename'
table.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Koha::Patron::Files
.SH "AUTHOR"
.IX Header "AUTHOR"
Kyle M Hall <kyle.m.hall@gmail.com>,
Jacek Ablewicz <ablewicz@gmail.com>
