.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Koha::Biblio 3pm"
.TH Koha::Biblio 3pm "2018-08-29" "perl v5.20.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Koha::Biblio \- Koha Biblio Object class
.SH "API"
.IX Header "API"
.SS "Class Methods"
.IX Subsection "Class Methods"
\fIstore\fR
.IX Subsection "store"
.PP
Overloaded \fIstore\fR method to set default values
.PP
\fIsubtitles\fR
.IX Subsection "subtitles"
.PP
my \f(CW@subtitles\fR = \f(CW$biblio\fR\->\fIsubtitles()\fR;
.PP
Returns list of subtitles for a record.
.PP
Keyword to \s-1MARC\s0 mapping for subtitle must be set for this method to return any possible values.
.PP
\fIcan_article_request\fR
.IX Subsection "can_article_request"
.PP
my \f(CW$bool\fR = \f(CW$biblio\fR\->can_article_request( \f(CW$borrower\fR );
.PP
Returns true if article requests can be made for this record
.PP
\&\f(CW$borrower\fR must be a Koha::Patron object
.PP
\fIarticle_request_type\fR
.IX Subsection "article_request_type"
.PP
my \f(CW$type\fR = \f(CW$biblio\fR\->article_request_type( \f(CW$borrower\fR );
.PP
Returns the article request type based on items, or on the record
itself if there are no items.
.PP
\&\f(CW$borrower\fR must be a Koha::Patron object
.PP
\fIarticle_request_type_for_bib\fR
.IX Subsection "article_request_type_for_bib"
.PP
my \f(CW$type\fR = \f(CW$biblio\fR\->article_request_type_for_bib
.PP
Returns the article request type 'yes', 'no', 'item_only', 'bib_only', for the given record
.PP
\fIarticle_request_type_for_items\fR
.IX Subsection "article_request_type_for_items"
.PP
my \f(CW$type\fR = \f(CW$biblio\fR\->article_request_type_for_items
.PP
Returns the article request type 'yes', 'no', 'item_only', 'bib_only', for the given record's items
.PP
If there is a conflict where some items are 'bib_only' and some are 'item_only', 'bib_only' will be returned.
.PP
\fIarticle_requests\fR
.IX Subsection "article_requests"
.PP
my \f(CW@requests\fR = \f(CW$biblio\fR\->article_requests
.PP
Returns the article requests associated with this Biblio
.PP
\fIarticle_requests_current\fR
.IX Subsection "article_requests_current"
.PP
my \f(CW@requests\fR = \f(CW$biblio\fR\->article_requests_current
.PP
Returns the article requests associated with this Biblio that are incomplete
.PP
\fIarticle_requests_finished\fR
.IX Subsection "article_requests_finished"
.PP
my \f(CW@requests\fR = \f(CW$biblio\fR\->article_requests_finished
.PP
Returns the article requests associated with this Biblio that are completed
.PP
\fIitems\fR
.IX Subsection "items"
.PP
my \f(CW@items\fR = \f(CW$biblio\fR\->\fIitems()\fR;
my \f(CW$items\fR = \f(CW$biblio\fR\->\fIitems()\fR;
.PP
Returns the related Koha::Items object for this biblio in scalar context,
or list of Koha::Item objects in list context.
.PP
\fIitemtype\fR
.IX Subsection "itemtype"
.PP
my \f(CW$itemtype\fR = \f(CW$biblio\fR\->\fIitemtype()\fR;
.PP
Returns the itemtype for this record.
.PP
\fIholds\fR
.IX Subsection "holds"
.PP
my \f(CW$holds\fR = \f(CW$biblio\fR\->\fIholds()\fR;
.PP
return the current holds placed on this record
.PP
\fIcurrent_holds\fR
.IX Subsection "current_holds"
.PP
my \f(CW$holds\fR = \f(CW$biblio\fR\->current_holds
.PP
Return the holds placed on this bibliographic record.
It does not include future holds.
.PP
\fIbiblioitem\fR
.IX Subsection "biblioitem"
.PP
my \f(CW$field\fR = \f(CW$self\fR\->\fIbiblioitem()\fR\->itemtype
.PP
Returns the related Koha::Biblioitem object for this Biblio object
.PP
\fIsubscriptions\fR
.IX Subsection "subscriptions"
.PP
my \f(CW$subscriptions\fR = \f(CW$self\fR\->subscriptions
.PP
Returns the related Koha::Subscriptions object for this Biblio object
.PP
\fIhas_items_waiting_or_intransit\fR
.IX Subsection "has_items_waiting_or_intransit"
.PP
my \f(CW$itemsWaitingOrInTransit\fR = \f(CW$biblio\fR\->has_items_waiting_or_intransit
.PP
Tells if this bibliographic record has items waiting or in transit.
.PP
\fItype\fR
.IX Subsection "type"
.SH "AUTHOR"
.IX Header "AUTHOR"
Kyle M Hall <kyle@bywatersolutions.com>
