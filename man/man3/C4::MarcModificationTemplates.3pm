.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "C4::MarcModificationTemplates 3pm"
.TH C4::MarcModificationTemplates 3pm "2018-08-29" "perl v5.20.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
C4::MarcModificationTemplates \- Module to manage MARC Modification Templates
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\s-1MARC\s0 Modification Templates are a tool for marc batch imports,
so that librarians can set up templates for various vendors'
files telling Koha what fields to insert data into.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "GetModificationTemplates"
.IX Subsection "GetModificationTemplates"
.Vb 1
\&  my @templates = GetModificationTemplates( $template_id );
\&
\&  Passing optional $template_id marks it as the selected template.
.Ve
.SS " AddModificationTemplate"
.IX Subsection " AddModificationTemplate"
.Vb 1
\&  $template_id = AddModificationTemplate( $template_name[, $template_id ] );
\&
\&  If $template_id is supplied, the actions from that template will be copied
\&  into the newly created template.
.Ve
.SS " DelModificationTemplate"
.IX Subsection " DelModificationTemplate"
.Vb 1
\&  DelModificationTemplate( $template_id );
.Ve
.SS " GetModificationTemplateAction"
.IX Subsection " GetModificationTemplateAction"
.Vb 1
\&  my $action = GetModificationTemplateAction( $mmta_id );
.Ve
.SS " GetModificationTemplateActions"
.IX Subsection " GetModificationTemplateActions"
.Vb 1
\&  my @actions = GetModificationTemplateActions( $template_id );
.Ve
.SS " AddModificationTemplateAction"
.IX Subsection " AddModificationTemplateAction"
.Vb 8
\&  AddModificationTemplateAction(
\&    $template_id, $action, $field_number,
\&    $from_field, $from_subfield, $field_value,
\&    $to_field, $to_subfield, $to_regex_search, $to_regex_replace, $to_regex_modifiers
\&    $conditional, $conditional_field, $conditional_subfield,
\&    $conditional_comparison, $conditional_value,
\&    $conditional_regex, $description
\&  );
\&
\&  Adds a new action to the given modification template.
.Ve
.SS " ModModificationTemplateAction"
.IX Subsection " ModModificationTemplateAction"
.Vb 8
\&  ModModificationTemplateAction(
\&    $mmta_id, $action, $field_number, $from_field,
\&    $from_subfield, $field_value, $to_field,
\&    $to_subfield, $to_regex_search, $to_regex_replace, $to_regex_modifiers, $conditional,
\&    $conditional_field, $conditional_subfield,
\&    $conditional_comparison, $conditional_value,
\&    $conditional_regex, $description
\&  );
\&
\&  Modifies an existing action.
.Ve
.SS " DelModificationTemplateAction"
.IX Subsection " DelModificationTemplateAction"
.Vb 1
\&  DelModificationTemplateAction( $mmta_id );
\&
\&  Deletes the given template action.
.Ve
.SS " MoveModificationTemplateAction"
.IX Subsection " MoveModificationTemplateAction"
.Vb 1
\&  MoveModificationTemplateAction( $mmta_id, $where );
\&
\&  Changes the order for the given action.
\&  Options for $where are \*(Aqup\*(Aq, \*(Aqdown\*(Aq, \*(Aqtop\*(Aq and \*(Aqbottom\*(Aq
.Ve
.SS " ModifyRecordsWithTemplate"
.IX Subsection " ModifyRecordsWithTemplate"
.Vb 1
\&  ModifyRecordsWithTemplate( $template_id, $batch );
\&
\&  Accepts a template id and a MARC::Batch object.
.Ve
.SS " ModifyRecordWithTemplate"
.IX Subsection " ModifyRecordWithTemplate"
.Vb 1
\&  ModifyRecordWithTemplate( $template_id, $record )
\&
\&  Accepts a MARC::Record object ( $record ) and modifies
\&  it based on the actions for the given $template_id
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Kyle M Hall
