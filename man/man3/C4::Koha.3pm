.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "C4::Koha 3pm"
.TH C4::Koha 3pm "2018-08-29" "perl v5.20.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
C4::Koha \- Perl Module containing convenience functions for Koha scripts
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
use C4::Koha;
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Koha.pm provides many functions for Koha scripts.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "GetItemTypesCategorized"
.IX Subsection "GetItemTypesCategorized"
.Vb 1
\&    $categories = GetItemTypesCategorized();
.Ve
.PP
Returns a hashref containing search categories.
A search category will be put in the hash if at least one of its itemtypes is visible in \s-1OPAC.\s0
The categories must be part of Authorized Values (\s-1ITEMTYPECAT\s0)
.SS "getitemtypeimagedir"
.IX Subsection "getitemtypeimagedir"
.Vb 1
\&  my $directory = getitemtypeimagedir( \*(Aqopac\*(Aq );
.Ve
.PP
pass in 'opac' or 'intranet'. Defaults to 'opac'.
.PP
returns the full path to the appropriate directory containing images.
.PP
\fI_getImagesFromDirectory\fR
.IX Subsection "_getImagesFromDirectory"
.PP
Find all of the image files in a directory in the filesystem
.PP
parameters: a directory name
.PP
returns: a list of images in that directory.
.PP
Notes: this does not traverse into subdirectories. See
_getSubdirectoryNames for help with that.
Images are assumed to be files with .gif or .png file extensions.
The image names returned do not have the directory name on them.
.PP
\fI_getSubdirectoryNames\fR
.IX Subsection "_getSubdirectoryNames"
.PP
Find all of the directories in a directory in the filesystem
.PP
parameters: a directory name
.PP
returns: a list of subdirectories in that directory.
.PP
Notes: this does not traverse into subdirectories. Only the first
level of subdirectories are returned.
The directory names returned don't have the parent directory name on them.
.PP
\fIgetImageSets\fR
.IX Subsection "getImageSets"
.PP
returns: a listref of hashrefs. Each hash represents another collection of images.
.PP
.Vb 3
\& { imagesetname => \*(Aqnpl\*(Aq, # the name of the image set (npl is the original one)
\&         images => listref of image hashrefs
\& }
.Ve
.PP
each image is represented by a hashref like this:
.PP
.Vb 6
\& { KohaImage     => \*(Aqnpl/image.gif\*(Aq,
\&   StaffImageUrl => \*(Aq/intranet\-tmpl/prog/img/itemtypeimg/npl/image.gif\*(Aq,
\&   OpacImageURL  => \*(Aq/opac\-tmpl/prog/itemtypeimg/npl/image.gif\*(Aq
\&   checked       => 0 or 1: was this the image passed to this method?
\&                    Note: I\*(Aqd like to remove this somehow.
\& }
.Ve
.SS "GetPrinters"
.IX Subsection "GetPrinters"
.Vb 2
\&  $printers = &GetPrinters();
\&  @queues = keys %$printers;
.Ve
.PP
Returns information about existing printer queues.
.PP
\&\f(CW$printers\fR is a reference-to-hash whose keys are the print queues
defined in the printers table of the Koha database. The values are
references-to-hash, whose keys are the fields in the printers table.
.SS "GetPrinter"
.IX Subsection "GetPrinter"
.Vb 1
\&  $printer = GetPrinter( $query, $printers );
.Ve
.SS "getnbpages"
.IX Subsection "getnbpages"
Returns the number of pages to display in a pagination bar, given the number
of items and the number of items per page.
.SS "getallthemes"
.IX Subsection "getallthemes"
.Vb 2
\&  (@themes) = &getallthemes(\*(Aqopac\*(Aq);
\&  (@themes) = &getallthemes(\*(Aqintranet\*(Aq);
.Ve
.PP
Returns an array of all available themes.
.SS "GetAuthorisedValues"
.IX Subsection "GetAuthorisedValues"
.Vb 1
\&  $authvalues = GetAuthorisedValues([$category]);
.Ve
.PP
This function returns all authorised values from the'authorised_value' table in a reference to array of hashrefs.
.PP
\&\f(CW$category\fR returns authorised values for just one category (optional).
.PP
\&\f(CW$opac\fR If set to a true value, displays \s-1OPAC\s0 descriptions rather than normal ones when they exist.
.SS "xml_escape"
.IX Subsection "xml_escape"
.Vb 1
\&  my $escaped_string = C4::Koha::xml_escape($string);
.Ve
.PP
Convert &, <, >, ', and " in a string to \s-1XML\s0 entities
.SS "display_marc_indicators"
.IX Subsection "display_marc_indicators"
.Vb 1
\&  my $display_form = C4::Koha::display_marc_indicators($field);
.Ve
.PP
\&\f(CW$field\fR is a MARC::Field object
.PP
Generate a display form of the indicators of a variable
\&\s-1MARC\s0 field, replacing any blanks with '#'.
.SS "GetDailyQuote($opts)"
.IX Subsection "GetDailyQuote($opts)"
Takes a hashref of options
.PP
Currently supported options are:
.PP
\&'id'        An exact quote id
\&'random'    Select a random quote
noop        When no option is passed in, this sub will return the quote timestamped for the current day
.PP
The function returns an anonymous hash following this format:
.PP
.Vb 6
\&        {
\&          \*(Aqsource\*(Aq => \*(Aqsource\-of\-quote\*(Aq,
\&          \*(Aqtimestamp\*(Aq => \*(Aqtimestamp\-value\*(Aq,
\&          \*(Aqtext\*(Aq => \*(Aqtext\-of\-quote\*(Aq,
\&          \*(Aqid\*(Aq => \*(Aqquote\-id\*(Aq
\&        };
.Ve
.SS "NormalizedISBN"
.IX Subsection "NormalizedISBN"
.Vb 5
\&  my $isbns = NormalizedISBN({
\&    isbn => $isbn,
\&    strip_hyphens => [0,1],
\&    format => [\*(AqISBN\-10\*(Aq, \*(AqISBN\-13\*(Aq]
\&  });
\&
\&  Returns an isbn validated by Business::ISBN.
\&  Optionally strips hyphens and/or forces the isbn
\&  to be of the specified format.
\&
\&  If the string cannot be validated as an isbn,
\&  it returns nothing.
.Ve
.SS "GetVariationsOfISBN"
.IX Subsection "GetVariationsOfISBN"
.Vb 1
\&  my @isbns = GetVariationsOfISBN( $isbn );
\&
\&  Returns a list of variations of the given isbn in
\&  both ISBN\-10 and ISBN\-13 formats, with and without
\&  hyphens.
\&
\&  In a scalar context, the isbns are returned as a
\&  string delimited by \*(Aq | \*(Aq.
.Ve
.SS "GetVariationsOfISBNs"
.IX Subsection "GetVariationsOfISBNs"
.Vb 1
\&  my @isbns = GetVariationsOfISBNs( @isbns );
\&
\&  Returns a list of variations of the given isbns in
\&  both ISBN\-10 and ISBN\-13 formats, with and without
\&  hyphens.
\&
\&  In a scalar context, the isbns are returned as a
\&  string delimited by \*(Aq | \*(Aq.
.Ve
.SS "NormalizedISSN"
.IX Subsection "NormalizedISSN"
.Vb 4
\&  my $issns = NormalizedISSN({
\&          issn => $issn,
\&          strip_hyphen => [0,1]
\&          });
\&
\&  Returns an issn validated by Business::ISSN.
\&  Optionally strips hyphen.
\&
\&  If the string cannot be validated as an issn,
\&  it returns nothing.
.Ve
.SS "GetVariationsOfISSN"
.IX Subsection "GetVariationsOfISSN"
.Vb 1
\&  my @issns = GetVariationsOfISSN( $issn );
\&
\&  Returns a list of variations of the given issn in
\&  with and without a hyphen.
\&
\&  In a scalar context, the issns are returned as a
\&  string delimited by \*(Aq | \*(Aq.
.Ve
.SS "GetVariationsOfISSNs"
.IX Subsection "GetVariationsOfISSNs"
.Vb 1
\&  my @issns = GetVariationsOfISSNs( @issns );
\&
\&  Returns a list of variations of the given issns in
\&  with and without a hyphen.
\&
\&  In a scalar context, the issns are returned as a
\&  string delimited by \*(Aq | \*(Aq.
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Koha Team
