.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Koha::XSLT_Handler 3pm"
.TH Koha::XSLT_Handler 3pm "2018-08-29" "perl v5.20.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Koha::XSLT_Handler \- Facilitate use of XSLT transformations
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 8
\&    use Koha::XSLT_Handler;
\&    my $xslt_engine = Koha::XSLT_Handler\->new;
\&    my $output = $xslt_engine\->transform($xml, $xsltfilename);
\&    $output = $xslt_engine\->transform({ xml => $xml, file => $file });
\&    $output = $xslt_engine\->transform({ xml => $xml, code => $code });
\&    my $err= $xslt_engine\->err; # error number
\&    my $errstr= $xslt_engine\->errstr; # error message
\&    $xslt_engine\->refresh($xsltfilename);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.Vb 5
\&    A XSLT handler object on top of LibXML and LibXSLT, allowing you to
\&    run XSLT stylesheets repeatedly without loading them again.
\&    Errors occurring during loading, parsing or transforming are reported
\&    via the err and errstr attributes.
\&    Reloading XSLT files can be done with the refresh method.
.Ve
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
.Vb 1
\&    Create handler object (via Class::Accessor)
.Ve
.SS "transform"
.IX Subsection "transform"
.Vb 1
\&    Run transformation for specific string and stylesheet
.Ve
.SS "refresh"
.IX Subsection "refresh"
.Vb 1
\&    Allow to reload stylesheets when transforming again
.Ve
.SH "PROPERTIES"
.IX Header "PROPERTIES"
.SS "err"
.IX Subsection "err"
.Vb 1
\&    Error number (see list of ERROR CODES)
.Ve
.SS "errstr"
.IX Subsection "errstr"
.Vb 1
\&    Error message
.Ve
.SS "do_not_return_source"
.IX Subsection "do_not_return_source"
.Vb 2
\&    If true, transform returns undef on failure. By default, it returns the
\&    original string passed. Errors are reported as described.
.Ve
.SS "print_warns"
.IX Subsection "print_warns"
.Vb 1
\&    If set, print error messages to STDERR. True by default.
.Ve
.SH "ERROR CODES"
.IX Header "ERROR CODES"
.SS "Error 1"
.IX Subsection "Error 1"
.Vb 1
\&    No XSLT file passed
.Ve
.SS "Error 2"
.IX Subsection "Error 2"
.Vb 1
\&    XSLT file not found
.Ve
.SS "Error 3"
.IX Subsection "Error 3"
.Vb 1
\&    Error while loading stylesheet xml: [furter information]
.Ve
.SS "Error 4"
.IX Subsection "Error 4"
.Vb 1
\&    Error while parsing stylesheet: [furter information]
.Ve
.SS "Error 5"
.IX Subsection "Error 5"
.Vb 1
\&    Error while parsing input: [furter information]
.Ve
.SS "Error 6"
.IX Subsection "Error 6"
.Vb 1
\&    Error while transforming input: [furter information]
.Ve
.SS "Error 7"
.IX Subsection "Error 7"
.Vb 1
\&    No string to transform
.Ve
.SH "INTERNALS"
.IX Header "INTERNALS"
.Vb 1
\&    For documentation purposes. You are not encouraged to access them.
.Ve
.SS "last_xsltfile"
.IX Subsection "last_xsltfile"
.Vb 1
\&    Contains the last successfully executed XSLT filename
.Ve
.SS "xslt_hash"
.IX Subsection "xslt_hash"
.Vb 1
\&    Hash reference to loaded stylesheets
.Ve
.SH "ADDITIONAL COMMENTS"
.IX Header "ADDITIONAL COMMENTS"
.SS "transform"
.IX Subsection "transform"
.Vb 8
\&    my $output= $xslt_engine\->transform( $xml, $xsltfilename, [$format] );
\&    #Alternatively:
\&    #$output = $xslt_engine\->transform({ xml => $xml, file => $file, [parameters => $parameters], [format => [\*(Aqchars\*(Aq|\*(Aqbytes\*(Aq|\*(Aqxmldoc\*(Aq]] });
\&    #$output = $xslt_engine\->transform({ xml => $xml, code => $code, [parameters => $parameters], [format => [\*(Aqchars\*(Aq|\*(Aqbytes\*(Aq|\*(Aqxmldoc\*(Aq]] });
\&    if( $xslt_engine\->err ) {
\&        #decide what to do on failure..
\&    }
\&    my $output2= $xslt_engine\->transform( $xml2 );
\&
\&    Pass a xml string and a fully qualified path of a XSLT file.
\&    Instead of a filename, you may also pass a URL.
\&    You may also pass the contents of a xsl file as a string like $code above.
\&    If you do not pass a filename, the last file used is assumed.
\&    Normally returns the transformed string; if you pass format => \*(Aqxmldoc\*(Aq in
\&    the hash format, it returns a xml document object.
\&    Check the error number in err to know if something went wrong.
\&    In that case do_not_return_source did determine the return value.
.Ve
.SS "refresh"
.IX Subsection "refresh"
.Vb 2
\&    $xslt_engine\->refresh;
\&    $xslt_engine\->refresh( $xsltfilename );
\&
\&    Pass a file for an individual refresh or no file to refresh all.
\&    Refresh returns the number of items affected.
\&    What we actually do, is just clear the internal cache for reloading next
\&    time when transform is called.
\&    The return value is mainly theoretical. Since this is supposed to work
\&    always(...), there is no actual need to test it.
\&    Note that refresh does also clear the error information.
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
.Vb 1
\&    Marcel de Rooy, Rijksmuseum Netherlands
.Ve
