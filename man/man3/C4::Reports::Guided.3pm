.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "C4::Reports::Guided 3pm"
.TH C4::Reports::Guided 3pm "2018-08-29" "perl v5.20.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
C4::Reports::Guided \- Module for generating guided reports
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use C4::Reports::Guided;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.SH "METHODS"
.IX Header "METHODS"
.SS "get_report_areas"
.IX Subsection "get_report_areas"
This will return a list of all the available report areas
.SS "get_report_types"
.IX Subsection "get_report_types"
This will return a list of all the available report types
.SS "get_report_groups"
.IX Subsection "get_report_groups"
This will return a list of all the available report areas with groups
.SS "get_all_tables"
.IX Subsection "get_all_tables"
This will return a list of all tables in the database
.SS "get_columns($area)"
.IX Subsection "get_columns($area)"
This will return a list of all columns for a report area
.SS "build_query($columns,$criteria,$orderby,$area)"
.IX Subsection "build_query($columns,$criteria,$orderby,$area)"
This will build the sql needed to return the results asked for, 
\&\f(CW$columns\fR is expected to be of the format tablename.columnname.
This is what get_columns returns.
.SS "get_criteria($area,$cgi);"
.IX Subsection "get_criteria($area,$cgi);"
Returns an arraref to hashrefs suitable for using in a tmpl_loop. With the criteria and available values.
.SS "execute_query"
.IX Subsection "execute_query"
.Vb 1
\&  ($sth, $error) = execute_query($sql, $offset, $limit[, \e@sql_params])
.Ve
.PP
This function returns a \s-1DBI\s0 statement handler from which the caller can
fetch the results of the \s-1SQL\s0 passed via \f(CW$sql\fR.
.PP
If passed any query other than a \s-1SELECT,\s0 or if there is a \s-1DB\s0 error,
\&\f(CW$errors\fR is returned, and is a hashref containing the error after this
manner:
.PP
\&\f(CW\*(C`$error\-\*(C'\fR{'sqlerr'}> contains the offending \s-1SQL\s0 keyword.
\&\f(CW\*(C`$error\-\*(C'\fR{'queryerr'}> contains the native db engine error returned
for the query.
.PP
\&\f(CW$offset\fR, and \f(CW$limit\fR are required parameters.
.PP
\&\f(CW\*(C`\e@sql_params\*(C'\fR is an optional list of parameter values to paste in.
The caller is responsible for making sure that \f(CW$sql\fR has placeholders
and that the number placeholders matches the number of parameters.
.SS "save_report($sql,$name,$type,$notes)"
.IX Subsection "save_report($sql,$name,$type,$notes)"
Given some sql and a name this will saved it so that it can reused
Returns id of the newly created report
.SS "get_column_type($column)"
.IX Subsection "get_column_type($column)"
This takes a column name of the format table.column and will return what type it is
(free text, set values, date)
.SS "get_distinct_values($column)"
.IX Subsection "get_distinct_values($column)"
Given a column name, return an arrary ref of hashrefs suitable for use as a tmpl_loop 
with the distinct values of the column
.SS "get_sql($report_id)"
.IX Subsection "get_sql($report_id)"
Given a report id, return the \s-1SQL\s0 statement for that report.
Otherwise, it just returns.
.SS "GetReservedAuthorisedValues"
.IX Subsection "GetReservedAuthorisedValues"
.Vb 1
\&    my %reserved_authorised_values = GetReservedAuthorisedValues();
.Ve
.PP
Returns a hash containig all reserved words
.SS "IsAuthorisedValueValid"
.IX Subsection "IsAuthorisedValueValid"
.Vb 1
\&    my $is_valid_ath_value = IsAuthorisedValueValid($authorised_value)
.Ve
.PP
Returns 1 if \f(CW$authorised_value\fR is on the reserved authorised values list or
in the authorised value categories defined in
.SS "GetParametersFromSQL"
.IX Subsection "GetParametersFromSQL"
.Vb 1
\&    my @sql_parameters = GetParametersFromSQL($sql)
.Ve
.PP
Returns an arrayref of hashes containing the keys name and authval
.SS "ValidateSQLParameters"
.IX Subsection "ValidateSQLParameters"
.Vb 1
\&    my @problematic_parameters = ValidateSQLParameters($sql)
.Ve
.PP
Returns an arrayref of hashes containing the keys name and authval of
those \s-1SQL\s0 parameters that do not correspond to valid authorised names
.PP
\fIconvert_sql\fR
.IX Subsection "convert_sql"
.PP
my \f(CW$updated_sql\fR = C4::Reports::Guided::convert_sql( \f(CW$sql\fR );
.PP
Convert a sql query using biblioitems.marcxml to use the new
biblio_metadata.metadata field instead
.SH "AUTHOR"
.IX Header "AUTHOR"
Chris Cormack <crc@liblime.com>
