.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Koha::REST::V1::Auth 3pm"
.TH Koha::REST::V1::Auth 3pm "2018-08-29" "perl v5.20.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Koha::REST::V1::Auth
.SS "Operations"
.IX Subsection "Operations"
\fIunder\fR
.IX Subsection "under"
.PP
This subroutine is called before every request to \s-1API.\s0
.PP
\fIauthenticate_api_request\fR
.IX Subsection "authenticate_api_request"
.PP
Validates authentication and allows access if authorization is not required or
if authorization is required and user has required permissions to access.
.PP
\fIallow_owner\fR
.IX Subsection "allow_owner"
.PP
Allows access to object for its owner.
.PP
There are endpoints that should allow access for the object owner even if they
do not have the required permission, e.g. access an own reserve. This can be
achieved by defining the operation as follows:
.PP
\&\*(L"/holds/{reserve_id}\*(R": {
    \*(L"get\*(R": {
        ...,
        \*(L"x\-koha-authorization\*(R": {
            \*(L"allow-owner\*(R": true,
            \*(L"permissions\*(R": {
                \*(L"borrowers\*(R": \*(L"1\*(R"
            }
        }
    }
}
.PP
\fIallow_guarantor\fR
.IX Subsection "allow_guarantor"
.PP
Same as \*(L"allow_owner\*(R", but checks if the object is owned by one of \f(CW$user\fR's
guarantees.
.PP
\fIcheck_object_ownership\fR
.IX Subsection "check_object_ownership"
.PP
Determines ownership of an object from request parameters.
.PP
As introducing an endpoint that allows access for object's owner; if the
parameter that will be used to determine ownership is not already inside
\&\f(CW$parameters\fR, add a new subroutine that checks the ownership and extend
\&\f(CW$parameters\fR to contain a key with parameter_name and a value of a subref to
the subroutine that you created.
.PP
\fI_object_ownership_by_accountlines_id\fR
.IX Subsection "_object_ownership_by_accountlines_id"
.PP
Finds a Koha::Account::Line\-object by \f(CW$accountlines_id\fR and checks if it
belongs to \f(CW$user\fR.
.PP
\fI_object_ownership_by_borrowernumber\fR
.IX Subsection "_object_ownership_by_borrowernumber"
.PP
Compares \f(CW$borrowernumber\fR to currently logged in \f(CW$user\fR.
.PP
\fI_object_ownership_by_checkout_id\fR
.IX Subsection "_object_ownership_by_checkout_id"
.PP
First, attempts to find a Koha::Checkout\-object by \f(CW$issue_id\fR. If we find one,
compare its borrowernumber to currently logged in \f(CW$user\fR. However, if an issue
is not found, attempt to find a Koha::Old::Checkout\-object instead and compare its
borrowernumber to currently logged in \f(CW$user\fR.
.PP
\fI_object_ownership_by_reserve_id\fR
.IX Subsection "_object_ownership_by_reserve_id"
.PP
Finds a Koha::Hold\-object by \f(CW$reserve_id\fR and checks if it
belongs to \f(CW$user\fR.
.PP
\&\s-1TODO:\s0 Also compare against old_reserves
